/**
 *
 *  Students.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace DAC 
{

class Students
{
  public:
    struct Cols
    {
        static const std::string _student_id;
        static const std::string _identity_number;
        static const std::string _student_name;
        static const std::string _student_picture;
        static const std::string _exam_date;
        static const std::string _submission_date;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Students(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Students(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Students(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Students() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column student_id  */
    ///Get the value of the column student_id, returns the default value if the column is null
    const int32_t &getValueOfStudentId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getStudentId() const noexcept;

    ///Set the value of the column student_id
    void setStudentId(const int32_t &pStudentId) noexcept;


    /**  For column identity_number  */
    ///Get the value of the column identity_number, returns the default value if the column is null
    const int32_t &getValueOfIdentityNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getIdentityNumber() const noexcept;

    ///Set the value of the column identity_number
    void setIdentityNumber(const int32_t &pIdentityNumber) noexcept;
    void setIdentityNumberToNull() noexcept;


    /**  For column student_name  */
    ///Get the value of the column student_name, returns the default value if the column is null
    const std::string &getValueOfStudentName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStudentName() const noexcept;

    ///Set the value of the column student_name
    void setStudentName(const std::string &pStudentName) noexcept;
    void setStudentName(std::string &&pStudentName) noexcept;
    void setStudentNameToNull() noexcept;


    /**  For column student_picture  */
    ///Get the value of the column student_picture, returns the default value if the column is null
    const std::vector<char> &getValueOfStudentPicture() const noexcept;
    ///Return the column value by std::string with binary data
    std::string getValueOfStudentPictureAsString() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::vector<char>> &getStudentPicture() const noexcept;

    ///Set the value of the column student_picture
    void setStudentPicture(const std::vector<char> &pStudentPicture) noexcept;
    void setStudentPicture(const std::string &pStudentPicture) noexcept;
    void setStudentPictureToNull() noexcept;


    /**  For column exam_date  */
    ///Get the value of the column exam_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfExamDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getExamDate() const noexcept;

    ///Set the value of the column exam_date
    void setExamDate(const ::trantor::Date &pExamDate) noexcept;
    void setExamDateToNull() noexcept;


    /**  For column submission_date  */
    ///Get the value of the column submission_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfSubmissionDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getSubmissionDate() const noexcept;

    ///Set the value of the column submission_date
    void setSubmissionDate(const ::trantor::Date &pSubmissionDate) noexcept;
    void setSubmissionDateToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 6;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Students>;
#ifdef __cpp_impl_coroutine
    friend CoroMapper<Students>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> studentId_;
    std::shared_ptr<int32_t> identityNumber_;
    std::shared_ptr<std::string> studentName_;
    std::shared_ptr<std::vector<char>> studentPicture_;
    std::shared_ptr<::trantor::Date> examDate_;
    std::shared_ptr<::trantor::Date> submissionDate_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[6]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where student_id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where student_id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "student_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "identity_number,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "student_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "student_picture,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "exam_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "submission_date,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[0])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace DAC
} // namespace drogon_model
