/**
 *
 *  Students.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Students.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::DAC;

const std::string Students::Cols::_student_id = "student_id";
const std::string Students::Cols::_identity_number = "identity_number";
const std::string Students::Cols::_student_name = "student_name";
const std::string Students::Cols::_student_picture = "student_picture";
const std::string Students::Cols::_exam_date = "exam_date";
const std::string Students::Cols::_submission_date = "submission_date";
const std::string Students::primaryKeyName = "student_id";
const bool Students::hasPrimaryKey = true;
const std::string Students::tableName = "students";

const std::vector<typename Students::MetaData> Students::metaData_={
{"student_id","int32_t","int(11)",4,0,1,1},
{"identity_number","int32_t","int(11)",4,0,0,0},
{"student_name","std::string","varchar(20)",20,0,0,0},
{"student_picture","std::vector<char>","mediumblob",0,0,0,0},
{"exam_date","::trantor::Date","date",0,0,0,0},
{"submission_date","::trantor::Date","date",0,0,0,0}
};
const std::string &Students::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Students::Students(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>(r["student_id"].as<int32_t>());
        }
        if(!r["identity_number"].isNull())
        {
            identityNumber_=std::make_shared<int32_t>(r["identity_number"].as<int32_t>());
        }
        if(!r["student_name"].isNull())
        {
            studentName_=std::make_shared<std::string>(r["student_name"].as<std::string>());
        }
        if(!r["student_picture"].isNull())
        {
            studentPicture_=std::make_shared<std::vector<char>>(r["student_picture"].as<std::vector<char>>());
        }
        if(!r["exam_date"].isNull())
        {
            auto daysStr = r["exam_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["submission_date"].isNull())
        {
            auto daysStr = r["submission_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            studentId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            identityNumber_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            studentName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            studentPicture_=std::make_shared<std::vector<char>>(r[index].as<std::vector<char>>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Students::Students(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            identityNumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            studentName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            studentPicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Students::Students(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("student_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson["student_id"].asInt64());
        }
    }
    if(pJson.isMember("identity_number"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["identity_number"].isNull())
        {
            identityNumber_=std::make_shared<int32_t>((int32_t)pJson["identity_number"].asInt64());
        }
    }
    if(pJson.isMember("student_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["student_name"].isNull())
        {
            studentName_=std::make_shared<std::string>(pJson["student_name"].asString());
        }
    }
    if(pJson.isMember("student_picture"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["student_picture"].isNull())
        {
            auto str = pJson["student_picture"].asString();
            studentPicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("exam_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["exam_date"].isNull())
        {
            auto daysStr = pJson["exam_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("submission_date"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["submission_date"].isNull())
        {
            auto daysStr = pJson["submission_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Students::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            identityNumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            studentName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            studentPicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}
                                                                    
void Students::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("student_id"))
    {
        if(!pJson["student_id"].isNull())
        {
            studentId_=std::make_shared<int32_t>((int32_t)pJson["student_id"].asInt64());
        }
    }
    if(pJson.isMember("identity_number"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["identity_number"].isNull())
        {
            identityNumber_=std::make_shared<int32_t>((int32_t)pJson["identity_number"].asInt64());
        }
    }
    if(pJson.isMember("student_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["student_name"].isNull())
        {
            studentName_=std::make_shared<std::string>(pJson["student_name"].asString());
        }
    }
    if(pJson.isMember("student_picture"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["student_picture"].isNull())
        {
            auto str = pJson["student_picture"].asString();
            studentPicture_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("exam_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["exam_date"].isNull())
        {
            auto daysStr = pJson["exam_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            examDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("submission_date"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["submission_date"].isNull())
        {
            auto daysStr = pJson["submission_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            submissionDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int32_t &Students::getValueOfStudentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(studentId_)
        return *studentId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Students::getStudentId() const noexcept
{
    return studentId_;
}
void Students::setStudentId(const int32_t &pStudentId) noexcept
{
    studentId_ = std::make_shared<int32_t>(pStudentId);
    dirtyFlag_[0] = true;
}



const typename Students::PrimaryKeyType & Students::getPrimaryKey() const
{
    assert(studentId_);
    return *studentId_;
}

const int32_t &Students::getValueOfIdentityNumber() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(identityNumber_)
        return *identityNumber_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Students::getIdentityNumber() const noexcept
{
    return identityNumber_;
}
void Students::setIdentityNumber(const int32_t &pIdentityNumber) noexcept
{
    identityNumber_ = std::make_shared<int32_t>(pIdentityNumber);
    dirtyFlag_[1] = true;
}


void Students::setIdentityNumberToNull() noexcept
{
    identityNumber_.reset();
    dirtyFlag_[1] = true;
}


const std::string &Students::getValueOfStudentName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(studentName_)
        return *studentName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Students::getStudentName() const noexcept
{
    return studentName_;
}
void Students::setStudentName(const std::string &pStudentName) noexcept
{
    studentName_ = std::make_shared<std::string>(pStudentName);
    dirtyFlag_[2] = true;
}
void Students::setStudentName(std::string &&pStudentName) noexcept
{
    studentName_ = std::make_shared<std::string>(std::move(pStudentName));
    dirtyFlag_[2] = true;
}


void Students::setStudentNameToNull() noexcept
{
    studentName_.reset();
    dirtyFlag_[2] = true;
}


const std::vector<char> &Students::getValueOfStudentPicture() const noexcept
{
    const static std::vector<char> defaultValue = std::vector<char>();
    if(studentPicture_)
        return *studentPicture_;
    return defaultValue;
}
std::string Students::getValueOfStudentPictureAsString() const noexcept
{
    const static std::string defaultValue = std::string();
    if(studentPicture_)
        return std::string(studentPicture_->data(),studentPicture_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Students::getStudentPicture() const noexcept
{
    return studentPicture_;
}
void Students::setStudentPicture(const std::vector<char> &pStudentPicture) noexcept
{
    studentPicture_ = std::make_shared<std::vector<char>>(pStudentPicture);
    dirtyFlag_[3] = true;
}

void Students::setStudentPicture(const std::string &pStudentPicture) noexcept
{
    studentPicture_ = std::make_shared<std::vector<char>>(pStudentPicture.c_str(),pStudentPicture.c_str()+pStudentPicture.length());
    dirtyFlag_[3] = true;
}

void Students::setStudentPictureToNull() noexcept
{
    studentPicture_.reset();
    dirtyFlag_[3] = true;
}


const ::trantor::Date &Students::getValueOfExamDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(examDate_)
        return *examDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Students::getExamDate() const noexcept
{
    return examDate_;
}
void Students::setExamDate(const ::trantor::Date &pExamDate) noexcept
{
    examDate_ = std::make_shared<::trantor::Date>(pExamDate.roundDay());
    dirtyFlag_[4] = true;
}


void Students::setExamDateToNull() noexcept
{
    examDate_.reset();
    dirtyFlag_[4] = true;
}


const ::trantor::Date &Students::getValueOfSubmissionDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(submissionDate_)
        return *submissionDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Students::getSubmissionDate() const noexcept
{
    return submissionDate_;
}
void Students::setSubmissionDate(const ::trantor::Date &pSubmissionDate) noexcept
{
    submissionDate_ = std::make_shared<::trantor::Date>(pSubmissionDate.roundDay());
    dirtyFlag_[5] = true;
}


void Students::setSubmissionDateToNull() noexcept
{
    submissionDate_.reset();
    dirtyFlag_[5] = true;
}


void Students::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Students::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "student_id",
        "identity_number",
        "student_name",
        "student_picture",
        "exam_date",
        "submission_date"
    };
    return inCols;
}

void Students::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getStudentId())
        {
            binder << getValueOfStudentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdentityNumber())
        {
            binder << getValueOfIdentityNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStudentName())
        {
            binder << getValueOfStudentName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStudentPicture())
        {
            binder << getValueOfStudentPicture();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExamDate())
        {
            binder << getValueOfExamDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmissionDate())
        {
            binder << getValueOfSubmissionDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Students::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Students::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getStudentId())
        {
            binder << getValueOfStudentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdentityNumber())
        {
            binder << getValueOfIdentityNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getStudentName())
        {
            binder << getValueOfStudentName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStudentPicture())
        {
            binder << getValueOfStudentPicture();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExamDate())
        {
            binder << getValueOfExamDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmissionDate())
        {
            binder << getValueOfSubmissionDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Students::toJson() const
{
    Json::Value ret;
    if(getStudentId())
    {
        ret["student_id"]=getValueOfStudentId();
    }
    else
    {
        ret["student_id"]=Json::Value();
    }
    if(getIdentityNumber())
    {
        ret["identity_number"]=getValueOfIdentityNumber();
    }
    else
    {
        ret["identity_number"]=Json::Value();
    }
    if(getStudentName())
    {
        ret["student_name"]=getValueOfStudentName();
    }
    else
    {
        ret["student_name"]=Json::Value();
    }
    if(getStudentPicture())
    {
        ret["student_picture"]=drogon::utils::base64Encode((const unsigned char *)getStudentPicture()->data(),getStudentPicture()->size());
    }
    else
    {
        ret["student_picture"]=Json::Value();
    }
    if(getExamDate())
    {
        ret["exam_date"]=getExamDate()->toDbStringLocal();
    }
    else
    {
        ret["exam_date"]=Json::Value();
    }
    if(getSubmissionDate())
    {
        ret["submission_date"]=getSubmissionDate()->toDbStringLocal();
    }
    else
    {
        ret["submission_date"]=Json::Value();
    }
    return ret;
}

Json::Value Students::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getStudentId())
            {
                ret[pMasqueradingVector[0]]=getValueOfStudentId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdentityNumber())
            {
                ret[pMasqueradingVector[1]]=getValueOfIdentityNumber();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getStudentName())
            {
                ret[pMasqueradingVector[2]]=getValueOfStudentName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getStudentPicture())
            {
                ret[pMasqueradingVector[3]]=drogon::utils::base64Encode((const unsigned char *)getStudentPicture()->data(),getStudentPicture()->size());
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExamDate())
            {
                ret[pMasqueradingVector[4]]=getExamDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSubmissionDate())
            {
                ret[pMasqueradingVector[5]]=getSubmissionDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getStudentId())
    {
        ret["student_id"]=getValueOfStudentId();
    }
    else
    {
        ret["student_id"]=Json::Value();
    }
    if(getIdentityNumber())
    {
        ret["identity_number"]=getValueOfIdentityNumber();
    }
    else
    {
        ret["identity_number"]=Json::Value();
    }
    if(getStudentName())
    {
        ret["student_name"]=getValueOfStudentName();
    }
    else
    {
        ret["student_name"]=Json::Value();
    }
    if(getStudentPicture())
    {
        ret["student_picture"]=drogon::utils::base64Encode((const unsigned char *)getStudentPicture()->data(),getStudentPicture()->size());
    }
    else
    {
        ret["student_picture"]=Json::Value();
    }
    if(getExamDate())
    {
        ret["exam_date"]=getExamDate()->toDbStringLocal();
    }
    else
    {
        ret["exam_date"]=Json::Value();
    }
    if(getSubmissionDate())
    {
        ret["submission_date"]=getSubmissionDate()->toDbStringLocal();
    }
    else
    {
        ret["submission_date"]=Json::Value();
    }
    return ret;
}

bool Students::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("student_id"))
    {
        if(!validJsonOfField(0, "student_id", pJson["student_id"], err, true))
            return false;
    }
    else
    {
        err="The student_id column cannot be null";
        return false;
    }
    if(pJson.isMember("identity_number"))
    {
        if(!validJsonOfField(1, "identity_number", pJson["identity_number"], err, true))
            return false;
    }
    if(pJson.isMember("student_name"))
    {
        if(!validJsonOfField(2, "student_name", pJson["student_name"], err, true))
            return false;
    }
    if(pJson.isMember("student_picture"))
    {
        if(!validJsonOfField(3, "student_picture", pJson["student_picture"], err, true))
            return false;
    }
    if(pJson.isMember("exam_date"))
    {
        if(!validJsonOfField(4, "exam_date", pJson["exam_date"], err, true))
            return false;
    }
    if(pJson.isMember("submission_date"))
    {
        if(!validJsonOfField(5, "submission_date", pJson["submission_date"], err, true))
            return false;
    }
    return true;
}
bool Students::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Students::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("student_id"))
    {
        if(!validJsonOfField(0, "student_id", pJson["student_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("identity_number"))
    {
        if(!validJsonOfField(1, "identity_number", pJson["identity_number"], err, false))
            return false;
    }
    if(pJson.isMember("student_name"))
    {
        if(!validJsonOfField(2, "student_name", pJson["student_name"], err, false))
            return false;
    }
    if(pJson.isMember("student_picture"))
    {
        if(!validJsonOfField(3, "student_picture", pJson["student_picture"], err, false))
            return false;
    }
    if(pJson.isMember("exam_date"))
    {
        if(!validJsonOfField(4, "exam_date", pJson["exam_date"], err, false))
            return false;
    }
    if(pJson.isMember("submission_date"))
    {
        if(!validJsonOfField(5, "submission_date", pJson["submission_date"], err, false))
            return false;
    }
    return true;
}
bool Students::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Students::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson, 
                                std::string &err, 
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
